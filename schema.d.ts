/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/posts/{post-id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 게시물 조회
         * @description 게시물을 조회합니다.
         */
        get: operations["getPost"];
        /**
         * 게시물 수정
         * @description 게시물을 수정합니다.
         */
        put: operations["updatePost"];
        post?: never;
        /**
         * 게시물 삭제
         * @description 게시물을 삭제합니다.
         */
        delete: operations["deletePost"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/posts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 게시물 생성 및 요청
         * @description 게시물을 생성합니다.
         */
        post: operations["generatePost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/members/join": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 회원가입
         * @description 회원가입을 완료합니다.
         */
        post: operations["join"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/chat-rooms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 채팅방 목록 조회
         * @description 로그인한 사용자의 모든 채팅방 목록을 조회합니다.
         */
        get: operations["getChatRoomsByMember"];
        put?: never;
        /**
         * 채팅방 요청
         * @description 특정 회원과의 채팅방을 요청합니다. 채팅방이 없다면 새로 생성합니다.
         */
        post: operations["getChatRoom"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 로그아웃
         * @description 로그아웃을 수행합니다.
         */
        post: operations["logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 로그인
         * @description 회원 정보를 기반으로 로그인합니다.
         */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/email/code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 이메일 인증코드 전송
         * @description 이메일로 인증코드를 전송합니다.
         */
        post: operations["sendCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/email/code/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 인증코드 유효성 확인
         * @description 인증코드의 유효성을 확인합니다.
         */
        post: operations["verifyCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 회원 이름 검색
         * @description 회원 이름으로 회원을 검색합니다.
         */
        get: operations["searchMemberByName"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/members/{member_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 회원 정보 조회
         * @description 특정 회원의 정보를 조회합니다.
         */
        get: operations["getMemberInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/members/{member_id}/posts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 회원 게시글 조회
         * @description 특정 회원의 게시글을 조회합니다.
         */
        get: operations["getMemberPosts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/chat-rooms/{chat_room_id}/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 채팅 조회
         * @description 채팅방의 채팅을 조회합니다.
         */
        get: operations["getChatMessages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        PostRequest: {
            title?: string;
            content?: string;
            /** Format: int32 */
            "images-length": number;
        };
        CustomResponseBodyPostResponse: {
            message?: string;
            data?: components["schemas"]["PostResponse"];
        };
        ImageResponse: {
            url?: string;
        };
        MemberBriefResponse: {
            /** Format: int64 */
            member_id?: number;
            username?: string;
            real_name?: string;
            profile_image_url?: string;
        };
        PostResponse: {
            /** Format: int64 */
            post_id?: number;
            title?: string;
            content?: string;
            /** Format: date-time */
            create_at?: string;
            author?: components["schemas"]["MemberBriefResponse"];
            images?: components["schemas"]["ImageResponse"][];
        };
        JoinRequest: {
            /**
             * @description 회원가입할 사용자의 username
             * @example testUser
             */
            username: string;
            /**
             * @description 회원가입할 사용자의 password
             * @example password123
             */
            password: string;
            /**
             * @description 회원가입할 사용자의 realName
             * @example 테스트 유저
             */
            "real-name": string;
            /**
             * @description 회원가입할 사용자의 email
             * @example testUser@email.com
             */
            email: string;
        };
        CustomResponseBodyVoid: {
            message?: string;
            data?: unknown;
        };
        ChatRoomRequest: {
            /** Format: int64 */
            recipient_id?: number;
        };
        ChatRoomResponse: {
            /** Format: int64 */
            chat_room_id?: number;
            last_chat?: string;
            members?: components["schemas"]["MemberBriefResponse"][];
        };
        CustomResponseBodyChatRoomResponse: {
            message?: string;
            data?: components["schemas"]["ChatRoomResponse"];
        };
        LoginRequest: {
            /**
             * @description 로그인할 사용자의 username
             * @example testUser
             */
            username: string;
            /**
             * @description 로그인할 사용자의 password
             * @example password123
             */
            password: string;
        };
        CustomResponseBodyMemberBriefResponse: {
            message?: string;
            data?: components["schemas"]["MemberBriefResponse"];
        };
        CodeRequest: {
            /**
             * @description 이메일 인증을 위한 이메일 주소
             * @example testUser@email.com
             */
            email: string;
        };
        VerifyRequest: {
            /**
             * @description 이메일 인증을 위한 이메일 주소
             * @example testUser@email.com
             */
            email: string;
            /**
             * @description 이메일 인증 확인을 위한 인증 코드
             * @example 123456
             */
            code: string;
        };
        CustomResponseBodyMemberDetailResponse: {
            message?: string;
            data?: components["schemas"]["MemberDetailResponse"];
        };
        MemberDetailResponse: {
            /** Format: int64 */
            member_id?: number;
            username?: string;
            real_name?: string;
            profile_image_url?: string;
            introduction?: string;
            /** Format: int64 */
            follower_count?: number;
            /** Format: int64 */
            following_count?: number;
        };
        Pageable: {
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
            sort?: string[];
        };
        CustomResponseBodySlicePostResponse: {
            message?: string;
            data?: components["schemas"]["SlicePostResponse"];
        };
        PageableObject: {
            /** Format: int64 */
            offset?: number;
            sort?: components["schemas"]["SortObject"];
            paged?: boolean;
            /** Format: int32 */
            pageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
            unpaged?: boolean;
        };
        SlicePostResponse: {
            first?: boolean;
            last?: boolean;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["PostResponse"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["PageableObject"];
            empty?: boolean;
        };
        SortObject: {
            empty?: boolean;
            sorted?: boolean;
            unsorted?: boolean;
        };
        CustomResponseBodySliceChatRoomResponse: {
            message?: string;
            data?: components["schemas"]["SliceChatRoomResponse"];
        };
        SliceChatRoomResponse: {
            first?: boolean;
            last?: boolean;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["ChatRoomResponse"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["PageableObject"];
            empty?: boolean;
        };
        ChatResponse: {
            chat_id?: string;
            /** Format: int64 */
            chat_room_id?: number;
            /** Format: int64 */
            sender_id?: number;
            sender_username?: string;
            sender_real_name?: string;
            content?: string;
            created_at?: string;
        };
        CustomResponseBodySliceChatResponse: {
            message?: string;
            data?: components["schemas"]["SliceChatResponse"];
        };
        SliceChatResponse: {
            first?: boolean;
            last?: boolean;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["ChatResponse"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["PageableObject"];
            empty?: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getPost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                "post-id": number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CustomResponseBodyPostResponse"];
                };
            };
        };
    };
    updatePost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                "post-id": number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CustomResponseBodyPostResponse"];
                };
            };
        };
    };
    deletePost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                "post-id": number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CustomResponseBodyPostResponse"];
                };
            };
        };
    };
    generatePost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CustomResponseBodyPostResponse"];
                };
            };
        };
    };
    join: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["JoinRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CustomResponseBodyVoid"];
                };
            };
        };
    };
    getChatRoomsByMember: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CustomResponseBodySliceChatRoomResponse"];
                };
            };
        };
    };
    getChatRoom: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChatRoomRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CustomResponseBodyChatRoomResponse"];
                };
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CustomResponseBodyVoid"];
                };
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CustomResponseBodyMemberBriefResponse"];
                };
            };
        };
    };
    sendCode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CodeRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CustomResponseBodyVoid"];
                };
            };
        };
    };
    verifyCode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VerifyRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CustomResponseBodyVoid"];
                };
            };
        };
    };
    searchMemberByName: {
        parameters: {
            query: {
                username: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CustomResponseBodyMemberBriefResponse"];
                };
            };
        };
    };
    getMemberInfo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                member_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CustomResponseBodyMemberDetailResponse"];
                };
            };
        };
    };
    getMemberPosts: {
        parameters: {
            query: {
                "cursor-id"?: number;
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path: {
                member_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CustomResponseBodySlicePostResponse"];
                };
            };
        };
    };
    getChatMessages: {
        parameters: {
            query?: {
                last_chat_id?: string;
            };
            header?: never;
            path: {
                chat_room_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CustomResponseBodySliceChatResponse"];
                };
            };
        };
    };
}
